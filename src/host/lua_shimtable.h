/**
* \file   lua_shimtable.h
* \brief  Lua shim for premake binary modules.
* \author Copyright (c) 2017 Tom van Dijck and the Premake project
*/
#ifndef HEADER_lua_shimtable_H
#define HEADER_lua_shimtable_H

#include "luashim.h"

#if LUA_VERSION_NUM > 501
#define LUA52_SYM(name) &name
#else
#define LUA52_SYM(name) NULL
#endif

#if !defined(LUA_BUILD_AS_DLL)

static LuaFunctionTable_t s_shimTable = {
	&luaL_register,
	&lua_newstate,
	&lua_close,
	&lua_newthread,
	&lua_atpanic,
	LUA52_SYM(lua_version),
	LUA52_SYM(lua_absindex),
	&lua_gettop,
	&lua_settop,
	&lua_pushvalue,
	LUA52_SYM(lua_rotate),
	LUA52_SYM(lua_copy),
	&lua_checkstack,
	&lua_xmove,
	&lua_isnumber,
	&lua_isstring,
	&lua_iscfunction,
	LUA52_SYM(lua_isinteger),
	&lua_isuserdata,
	&lua_type,
	&lua_typename,
	LUA52_SYM(lua_tonumberx),
	LUA52_SYM(lua_tointegerx),
	&lua_toboolean,
	&lua_tolstring,
	LUA52_SYM(lua_rawlen),
	&lua_tocfunction,
	&lua_touserdata,
	&lua_tothread,
	&lua_topointer,
	LUA52_SYM(lua_arith),
	&lua_rawequal,
	LUA52_SYM(lua_compare),
	&lua_pushnil,
	&lua_pushnumber,
	&lua_pushinteger,

	&lua_pushvfstring,
	&lua_pushcclosure,
	&lua_pushboolean,
	&lua_pushlightuserdata,
	&lua_pushthread,
	LUA52_SYM(lua_getglobal),
	LUA52_SYM(lua_geti),
	LUA52_SYM(lua_rawgetp),
	&lua_createtable,
	&lua_newuserdata,
	&lua_getmetatable,
	LUA52_SYM(lua_getuservalue),
	LUA52_SYM(lua_setglobal),
	&lua_settable,
	&lua_setfield,
	LUA52_SYM(lua_seti),
	&lua_rawset,
	LUA52_SYM(lua_rawsetp),
	&lua_setmetatable,
	LUA52_SYM(lua_setuservalue),
	LUA52_SYM(lua_callk),
	LUA52_SYM(lua_pcallk),
	LUA52_SYM(lua_yieldk),
	&lua_status,
	LUA52_SYM(lua_isyieldable),
	&lua_gc,
	&lua_error,
	&lua_next,
	&lua_concat,
	LUA52_SYM(lua_len),
	LUA52_SYM(lua_stringtonumber),
	&lua_getallocf,
	&lua_setallocf,
	&lua_getstack,
	&lua_getinfo,
	&lua_getlocal,
	&lua_setlocal,
	&lua_getupvalue,
	&lua_setupvalue,
	&lua_upvalueid,
	&lua_upvaluejoin,
	&lua_gethook,
	&lua_gethookmask,
	&lua_gethookcount,
	LUA52_SYM(luaL_checkversion_),
	&luaL_getmetafield,
	&luaL_callmeta,
	LUA52_SYM(luaL_tolstring),
	&luaL_argerror,
	&luaL_checklstring,
	&luaL_optlstring,
	&luaL_checknumber,
	&luaL_optnumber,
	&luaL_checkinteger,
	&luaL_optinteger,
	&luaL_checkstack,
	&luaL_checktype,
	&luaL_checkany,
	&luaL_newmetatable,
	LUA52_SYM(luaL_setmetatable),
	LUA52_SYM(luaL_testudata),
	&luaL_checkudata,
	&luaL_where,
	&luaL_checkoption,
	&luaL_fileresult,
	&luaL_execresult,
	&luaL_ref,
	&luaL_unref,
	&luaL_loadfilex,
	&luaL_loadbufferx,
	&luaL_loadstring,
	&luaL_newstate,
	LUA52_SYM(luaL_len),
	&luaL_gsub,
	LUA52_SYM(luaL_setfuncs),
	LUA52_SYM(luaL_getsubtable),
	&luaL_traceback,
	LUA52_SYM(luaL_requiref),
	&luaL_buffinit,
	LUA52_SYM(luaL_prepbuffsize),
	&luaL_addlstring,
	&luaL_addstring,
	&luaL_addvalue,
	&luaL_pushresult,
	LUA52_SYM(luaL_pushresultsize),
	LUA52_SYM(luaL_buffinitsize),
	&lua_pushlstring,
	&lua_pushstring,
	&lua_gettable,
	&lua_getfield,
	&lua_rawget,
	&lua_rawgeti,
	&lua_rawseti,
	&lua_load,
	&lua_dump,
	&lua_resume,
	&lua_sethook,
};
#endif

#endif
